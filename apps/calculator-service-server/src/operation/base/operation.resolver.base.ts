/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Operation } from "./Operation";
import { OperationCountArgs } from "./OperationCountArgs";
import { OperationFindManyArgs } from "./OperationFindManyArgs";
import { OperationFindUniqueArgs } from "./OperationFindUniqueArgs";
import { CreateOperationArgs } from "./CreateOperationArgs";
import { UpdateOperationArgs } from "./UpdateOperationArgs";
import { DeleteOperationArgs } from "./DeleteOperationArgs";
import { OperationLogFindManyArgs } from "../../operationLog/base/OperationLogFindManyArgs";
import { OperationLog } from "../../operationLog/base/OperationLog";
import { OperationDto } from "../OperationDto";
import { OperationService } from "../operation.service";
@graphql.Resolver(() => Operation)
export class OperationResolverBase {
  constructor(protected readonly service: OperationService) {}

  async _operationsMeta(
    @graphql.Args() args: OperationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Operation])
  async operations(
    @graphql.Args() args: OperationFindManyArgs
  ): Promise<Operation[]> {
    return this.service.operations(args);
  }

  @graphql.Query(() => Operation, { nullable: true })
  async operation(
    @graphql.Args() args: OperationFindUniqueArgs
  ): Promise<Operation | null> {
    const result = await this.service.operation(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Operation)
  async createOperation(
    @graphql.Args() args: CreateOperationArgs
  ): Promise<Operation> {
    return await this.service.createOperation({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Operation)
  async updateOperation(
    @graphql.Args() args: UpdateOperationArgs
  ): Promise<Operation | null> {
    try {
      return await this.service.updateOperation({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Operation)
  async deleteOperation(
    @graphql.Args() args: DeleteOperationArgs
  ): Promise<Operation | null> {
    try {
      return await this.service.deleteOperation(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [OperationLog], { name: "operationLogs" })
  async findOperationLogs(
    @graphql.Parent() parent: Operation,
    @graphql.Args() args: OperationLogFindManyArgs
  ): Promise<OperationLog[]> {
    const results = await this.service.findOperationLogs(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.Mutation(() => OperationDto)
  async AddNumbers(
    @graphql.Args()
    args: OperationDto
  ): Promise<OperationDto> {
    return this.service.AddNumbers(args);
  }

  @graphql.Mutation(() => OperationDto)
  async DivideNumbers(
    @graphql.Args()
    args: OperationDto
  ): Promise<OperationDto> {
    return this.service.DivideNumbers(args);
  }

  @graphql.Mutation(() => OperationDto)
  async MultiplyNumbers(
    @graphql.Args()
    args: OperationDto
  ): Promise<OperationDto> {
    return this.service.MultiplyNumbers(args);
  }

  @graphql.Mutation(() => OperationDto)
  async SubtractNumbers(
    @graphql.Args()
    args: OperationDto
  ): Promise<OperationDto> {
    return this.service.SubtractNumbers(args);
  }
}
