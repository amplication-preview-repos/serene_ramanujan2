/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { OperationLog } from "./OperationLog";
import { OperationLogCountArgs } from "./OperationLogCountArgs";
import { OperationLogFindManyArgs } from "./OperationLogFindManyArgs";
import { OperationLogFindUniqueArgs } from "./OperationLogFindUniqueArgs";
import { CreateOperationLogArgs } from "./CreateOperationLogArgs";
import { UpdateOperationLogArgs } from "./UpdateOperationLogArgs";
import { DeleteOperationLogArgs } from "./DeleteOperationLogArgs";
import { Operation } from "../../operation/base/Operation";
import { OperationLogService } from "../operationLog.service";
@graphql.Resolver(() => OperationLog)
export class OperationLogResolverBase {
  constructor(protected readonly service: OperationLogService) {}

  async _operationLogsMeta(
    @graphql.Args() args: OperationLogCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [OperationLog])
  async operationLogs(
    @graphql.Args() args: OperationLogFindManyArgs
  ): Promise<OperationLog[]> {
    return this.service.operationLogs(args);
  }

  @graphql.Query(() => OperationLog, { nullable: true })
  async operationLog(
    @graphql.Args() args: OperationLogFindUniqueArgs
  ): Promise<OperationLog | null> {
    const result = await this.service.operationLog(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => OperationLog)
  async createOperationLog(
    @graphql.Args() args: CreateOperationLogArgs
  ): Promise<OperationLog> {
    return await this.service.createOperationLog({
      ...args,
      data: {
        ...args.data,

        operation: args.data.operation
          ? {
              connect: args.data.operation,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => OperationLog)
  async updateOperationLog(
    @graphql.Args() args: UpdateOperationLogArgs
  ): Promise<OperationLog | null> {
    try {
      return await this.service.updateOperationLog({
        ...args,
        data: {
          ...args.data,

          operation: args.data.operation
            ? {
                connect: args.data.operation,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => OperationLog)
  async deleteOperationLog(
    @graphql.Args() args: DeleteOperationLogArgs
  ): Promise<OperationLog | null> {
    try {
      return await this.service.deleteOperationLog(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Operation, {
    nullable: true,
    name: "operation",
  })
  async getOperation(
    @graphql.Parent() parent: OperationLog
  ): Promise<Operation | null> {
    const result = await this.service.getOperation(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
