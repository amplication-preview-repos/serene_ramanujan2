/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { OperationLogService } from "../operationLog.service";
import { OperationLogCreateInput } from "./OperationLogCreateInput";
import { OperationLog } from "./OperationLog";
import { OperationLogFindManyArgs } from "./OperationLogFindManyArgs";
import { OperationLogWhereUniqueInput } from "./OperationLogWhereUniqueInput";
import { OperationLogUpdateInput } from "./OperationLogUpdateInput";

export class OperationLogControllerBase {
  constructor(protected readonly service: OperationLogService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: OperationLog })
  async createOperationLog(
    @common.Body() data: OperationLogCreateInput
  ): Promise<OperationLog> {
    return await this.service.createOperationLog({
      data: {
        ...data,

        operation: data.operation
          ? {
              connect: data.operation,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        timestamp: true,

        operation: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [OperationLog] })
  @ApiNestedQuery(OperationLogFindManyArgs)
  async operationLogs(@common.Req() request: Request): Promise<OperationLog[]> {
    const args = plainToClass(OperationLogFindManyArgs, request.query);
    return this.service.operationLogs({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        timestamp: true,

        operation: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: OperationLog })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async operationLog(
    @common.Param() params: OperationLogWhereUniqueInput
  ): Promise<OperationLog | null> {
    const result = await this.service.operationLog({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        timestamp: true,

        operation: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: OperationLog })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateOperationLog(
    @common.Param() params: OperationLogWhereUniqueInput,
    @common.Body() data: OperationLogUpdateInput
  ): Promise<OperationLog | null> {
    try {
      return await this.service.updateOperationLog({
        where: params,
        data: {
          ...data,

          operation: data.operation
            ? {
                connect: data.operation,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          timestamp: true,

          operation: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: OperationLog })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteOperationLog(
    @common.Param() params: OperationLogWhereUniqueInput
  ): Promise<OperationLog | null> {
    try {
      return await this.service.deleteOperationLog({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          timestamp: true,

          operation: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
