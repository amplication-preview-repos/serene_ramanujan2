/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  OperationLog as PrismaOperationLog,
  Operation as PrismaOperation,
} from "@prisma/client";

export class OperationLogServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.OperationLogCountArgs, "select">
  ): Promise<number> {
    return this.prisma.operationLog.count(args);
  }

  async operationLogs(
    args: Prisma.OperationLogFindManyArgs
  ): Promise<PrismaOperationLog[]> {
    return this.prisma.operationLog.findMany(args);
  }
  async operationLog(
    args: Prisma.OperationLogFindUniqueArgs
  ): Promise<PrismaOperationLog | null> {
    return this.prisma.operationLog.findUnique(args);
  }
  async createOperationLog(
    args: Prisma.OperationLogCreateArgs
  ): Promise<PrismaOperationLog> {
    return this.prisma.operationLog.create(args);
  }
  async updateOperationLog(
    args: Prisma.OperationLogUpdateArgs
  ): Promise<PrismaOperationLog> {
    return this.prisma.operationLog.update(args);
  }
  async deleteOperationLog(
    args: Prisma.OperationLogDeleteArgs
  ): Promise<PrismaOperationLog> {
    return this.prisma.operationLog.delete(args);
  }

  async getOperation(parentId: string): Promise<PrismaOperation | null> {
    return this.prisma.operationLog
      .findUnique({
        where: { id: parentId },
      })
      .operation();
  }
}
